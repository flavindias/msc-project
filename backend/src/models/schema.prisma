// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  name        String
  email       String       @unique
  password    String?
  spotify     SpotifyInfo?
  deezer      DeezerInfo?
  rooms       Room[]       @relation("owner")
  memberRooms RoomUser[]   @relation("member")
  votes       RoomVotes[]  @relation("userVotes")
  tracks      UserTracks[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
}

model SpotifyInfo {
  id        String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  product   String
  country   String
  picture   String
  type      String
  uri       String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model DeezerInfo {
  id        String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  country   String
  isKid     Boolean
  picture   String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Artist {
  id        String         @id @default(cuid())
  name      String
  picture   String?
  spotifyId String?        @unique
  deezerId  String?        @unique
  deezer    DeezerArtist?
  spotify   SpotifyArtist?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
}

model DeezerArtist {
  artist    Artist   @relation(fields: [id], references: [deezerId])
  id        String   @unique
  radio     Boolean
  link      String
  share     String
  tracklist String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

}

model SpotifyArtist {
  artist    Artist   @relation(fields: [id], references: [deezerId])
  id        String   @unique
  url       String
  uri       String
  href      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Track {
  id         String        @id @default(cuid())
  name       String
  isrc       String        @unique
  spotifyId  String?       @unique
  deezerId   String?       @unique
  room       RoomTracks[]
  deezer     DeezerTrack?
  spotify    SpotifyTrack?
  album      Album?        @relation(fields: [albumId], references: [id])
  albumId    String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
  userId     String?
  UserTracks UserTracks[]
}

model DeezerTrack {
  track          Track    @relation(fields: [id], references: [id])
  id             String   @unique
  releaseDate    DateTime
  readable       Boolean
  gain           Int?
  duration       Int
  trackPosition  Int
  diskNumber     Int
  explicitLyrics Boolean
  bpm            Int
  gainDb         Int
  link           String
  share          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model SpotifyTrack {
  track       Track    @relation(fields: [id], references: [id])
  id          String   @unique
  href        String
  isLocal     Boolean
  popularity  Int
  previewUrl  String
  uri         String
  trackNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model UserTracks {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String
  vote      Vote     @default(NEUTRAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Album {
  id        String        @id @default(cuid())
  title     String
  tracks    Track[]
  deezer    DeezerAlbum?
  spotify   SpotifyAlbum?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
}

model DeezerAlbum {
  album         Album    @relation(fields: [id], references: [id])
  id            String   @unique
  link          String
  releaseDate   DateTime
  trackListLink String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

}

model SpotifyAlbum {
  album       Album    @relation(fields: [id], references: [id])
  id          String   @unique
  href        String
  uri         String
  releaseDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

}

model Room {
  id        String       @id @default(cuid())
  name      String
  owner     User         @relation("owner", fields: [ownerId], references: [id])
  ownerId   String
  users     RoomUser[]
  tracks    RoomTracks[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())

}

model RoomTracks {
  id        String      @id @default(cuid())
  room      Room?       @relation(fields: [roomId], references: [id])
  roomId    String?
  Track     Track?      @relation(fields: [trackId], references: [id])
  trackId   String?
  votes     RoomVotes[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
}

model RoomUser {
  id     String @id @default(cuid())
  user   User   @relation("member", fields: [userId], references: [id])
  userId String
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model RoomVotes {
  id        String     @id @default(cuid())
  user      User       @relation("userVotes", fields: [userId], references: [id])
  userId    String
  track     RoomTracks @relation(fields: [trackId], references: [id])
  trackId   String
  vote      Vote       @default(NEUTRAL)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

enum Vote {
  LIKE
  NEUTRAL
  DISLIKE
}
